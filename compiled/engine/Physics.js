// Generated by CoffeeScript 1.9.1

/* Physics Engine */
var Physics;

Physics = (function() {
  function Physics(integrator) {
    this.integrator = integrator != null ? integrator : new Euler();
    this.timestep = 1.0 / 60;
    this.viscosity = 0.005;
    this.behaviours = [];
    this._time = 0.0;
    this._step = 0.0;
    this._clock = null;
    this._buffer = 0.0;
    this._maxSteps = 4;
    this.particles = [];
    this.springs = [];
  }


  /* Performs a numerical integration step. */

  Physics.prototype.integrate = function(dt) {
    var behaviour, drag, index, j, k, l, len, len1, len2, particle, ref, ref1, ref2, results, spring;
    drag = 1.0 - this.viscosity;
    ref = this.particles;
    for (index = j = 0, len = ref.length; j < len; index = ++j) {
      particle = ref[index];
      ref1 = this.behaviours;
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        behaviour = ref1[k];
        behaviour.apply(particle, dt, index);
      }
      particle.update(dt, index);
    }
    this.integrator.integrate(this.particles, dt, drag);
    ref2 = this.springs;
    results = [];
    for (l = 0, len2 = ref2.length; l < len2; l++) {
      spring = ref2[l];
      results.push(spring.apply());
    }
    return results;
  };


  /* Steps the system. */

  Physics.prototype.step = function() {
    var delta, i, time;
    if (this._clock == null) {
      this._clock = new Date().getTime();
    }
    time = new Date().getTime();
    delta = time - this._clock;
    if (delta <= 0.0) {
      return;
    }
    delta *= 0.001;
    this._clock = time;
    this._buffer += delta;
    i = 0;
    while (this._buffer >= this.timestep && ++i < this._maxSteps) {
      this.integrate(this.timestep);
      this._buffer -= this.timestep;
      this._time += this.timestep;
    }
    return this._step = new Date().getTime() - time;
  };


  /* Clean up after yourself. */

  Physics.prototype.destroy = function() {
    this.integrator = null;
    this.particles = null;
    return this.springs = null;
  };

  return Physics;

})();
