// Generated by CoffeeScript 1.9.1

/* Improved Euler Integrator */
var ImprovedEuler,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ImprovedEuler = (function(superClass) {
  extend(ImprovedEuler, superClass);

  function ImprovedEuler() {
    return ImprovedEuler.__super__.constructor.apply(this, arguments);
  }

  ImprovedEuler.prototype.integrate = function(particles, dt, drag) {
    var acc, dtSq, i, len, p, results, vel;
    acc = new Vector();
    vel = new Vector();
    dtSq = dt * dt;
    results = [];
    for (i = 0, len = particles.length; i < len; i++) {
      p = particles[i];
      if (!(!p.fixed)) {
        continue;
      }
      p.old.pos.copy(p.pos);
      p.acc.scale(p.massInv);
      vel.copy(p.vel);
      acc.copy(p.acc);
      p.pos.add((vel.scale(dt)).add(acc.scale(0.5 * dtSq)));
      p.vel.add(p.acc.scale(dt));
      if (drag) {
        p.vel.scale(drag);
      }
      results.push(p.acc.clear());
    }
    return results;
  };

  return ImprovedEuler;

})(Integrator);
