// Generated by CoffeeScript 1.9.1

/* Spring Bounce Behaviour */
var SpringBounce,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SpringBounce = (function(superClass) {
  extend(SpringBounce, superClass);

  function SpringBounce(v1, v2) {
    this.v1 = v1 != null ? v1 : new Vector();
    this.v2 = v2 != null ? v2 : new Vector();
    SpringBounce.__super__.constructor.apply(this, arguments);
  }

  SpringBounce.prototype.apply = function(p, dt, index) {
    var maxX, maxY, minX, minY, v;
    minX = this.v1.x <= this.v2.x ? this.v1.x : this.v2.x;
    maxX = this.v1.x > this.v2.x ? this.v1.x : this.v2.x;
    minY = this.v1.y <= this.v2.y ? this.v1.y : this.v2.y;
    maxY = this.v1.y > this.v2.y ? this.v1.y : this.v2.y;
    if (p.pos.x > minX && p.pos.x < maxX && p.pos.y > minY && p.pos.y < maxY) {
      v = this.v1.x * this.v2.y + this.v1.y * p.pos.x + this.v2.x * p.pos.y - this.v2.y * p.pos.x - this.v1.x * p.pos.y - this.v1.y * this.v2.x;
      if (v > 0 && v < 10000) {
        p.pos.x += 1;
        return p.pos.y += 1;
      } else if (v > -10000 && v <= 0) {
        p.pos.x -= 1;
        return p.pos.y -= 1;
      }
    }
  };

  return SpringBounce;

})(Behaviour);
